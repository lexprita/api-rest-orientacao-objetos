{
    "sourceFile": "src/controladores/PostControladores.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1723667229219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723667252907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723667354122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723667766370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668242590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+    }\r\n+\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668346234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+        }\r\n+\r\n+        editar(req: Request, res: Response) {\r\n+\r\n+        }\r\n+        excluir(req: Request, res: Response) {\r\n+\r\n+        }\r\n+    }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668381465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+            const post = new Post({\r\n+                titulo,\r\n+                descricao,\r\n+                autor\r\n+            })\r\n+        }\r\n+\r\n+        editar(req: Request, res: Response) {\r\n+\r\n+        }\r\n+        excluir(req: Request, res: Response) {\r\n+\r\n+        }\r\n+    }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668391029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+\r\n+        editar(req: Request, res: Response) {\r\n+\r\n+        }\r\n+        excluir(req: Request, res: Response) {\r\n+\r\n+        }\r\n+    }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668414310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668433953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668484290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668689302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push()\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668727757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push(post)\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723668992438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push(post)\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+        const { titulo, descricao } = req.body\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        post.titulo = titulo\r\n+        post.descricao = descricao\r\n+\r\n+        return res.status(204).send()\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723669001743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,674 +78,5 @@\n     }\r\n     excluir(req: Request, res: Response) {\r\n \r\n     }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-import Post from \"../modelos/Post\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-        posts.push(post)\r\n-\r\n-        return res.status(201).json(post)\r\n-    }\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-import Post from \"../modelos/Post\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-        posts.push()\r\n-        return res.status(201).json(post)\r\n-    }\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-import Post from \"../modelos/Post\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-\r\n-        return res.status(201).json(post)\r\n-    }\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-import Post from \"../modelos/Post\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-    }\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-    }\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-        }\r\n-        const post = new Post({\r\n-            titulo,\r\n-            descricao,\r\n-            autor\r\n-        })\r\n-\r\n-        editar(req: Request, res: Response) {\r\n-\r\n-        }\r\n-        excluir(req: Request, res: Response) {\r\n-\r\n-        }\r\n-    }\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-\r\n-            const post = new Post({\r\n-                titulo,\r\n-                descricao,\r\n-                autor\r\n-            })\r\n-        }\r\n-\r\n-        editar(req: Request, res: Response) {\r\n-\r\n-        }\r\n-        excluir(req: Request, res: Response) {\r\n-\r\n-        }\r\n-    }\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-\r\n-        const autor = autores.find((elemento) => {\r\n-            return elemento.id === autor_id\r\n-        })\r\n-\r\n-        if (!autor) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'O autor não existe'\r\n-            })\r\n-        }\r\n-\r\n-        editar(req: Request, res: Response) {\r\n-\r\n-        }\r\n-        excluir(req: Request, res: Response) {\r\n-\r\n-        }\r\n-    }\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-        const { titulo, descricao, autor_id } = req.body\r\n-\r\n-        if (!titulo || !descricao || !autor_id) {\r\n-            return res.status(400).json({\r\n-                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n-            })\r\n-        }\r\n-    }\r\n-\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-        const { id } = req.params\r\n-\r\n-        const post = posts.find((elemento) => {\r\n-            return elemento.id === id\r\n-        })\r\n-\r\n-        if (!post) {\r\n-            return res.status(404).json({\r\n-                mensagem: 'A postagem não existe'\r\n-            })\r\n-        }\r\n-\r\n-        return res.json(post)\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-        return res.json(posts)\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    editar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\r\n-}\n-import { Request, Response } from \"express\";\r\n-import { autores, posts } from \"../bancodedados\";\r\n-import Autor from \"../modelos/Autor\";\r\n-\r\n-\r\n-\r\n-\r\n-export default class PostControlador {\r\n-\r\n-    listar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    detalhar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    cadastrar(req: Request, res: Response) {\r\n-\r\n-    }\r\n-\r\n-    editar(req: Request, res: Response) {\r\n-        // buscar o autor que vai ser editado\r\n-        const { id } = req.params\r\n-        const { nome, idade } = req.body\r\n-\r\n-\r\n-        if (!nome || !idade) {\r\n-\r\n-        }\r\n-    }\r\n-    excluir(req: Request, res: Response) {\r\n-\r\n-    }\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723669208531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push(post)\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+        const { titulo, descricao } = req.body\r\n+\r\n+        if (!titulo || !descricao) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'O titulo e a descrição da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        post.titulo = titulo\r\n+        post.descricao = descricao\r\n+\r\n+        return res.status(204).send()\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723669525983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,101 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push(post)\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+        const { titulo, descricao } = req.body\r\n+\r\n+        if (!titulo || !descricao) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'O titulo e a descrição da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        post.titulo = titulo\r\n+        post.descricao = descricao\r\n+\r\n+        return res.status(204).send()\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const postIndice = posts.findIndex((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (postIndice === -1) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        posts.splice(postIndice, 1)\r\n+\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723669539211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+import { Request, Response } from \"express\";\r\n+import { autores, posts } from \"../bancodedados\";\r\n+import Autor from \"../modelos/Autor\";\r\n+import Post from \"../modelos/Post\";\r\n+\r\n+\r\n+\r\n+\r\n+export default class PostControlador {\r\n+\r\n+    listar(req: Request, res: Response) {\r\n+        return res.json(posts)\r\n+    }\r\n+\r\n+    detalhar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        return res.json(post)\r\n+    }\r\n+\r\n+    cadastrar(req: Request, res: Response) {\r\n+        const { titulo, descricao, autor_id } = req.body\r\n+\r\n+        if (!titulo || !descricao || !autor_id) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'Todos os campos da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const autor = autores.find((elemento) => {\r\n+            return elemento.id === autor_id\r\n+        })\r\n+\r\n+        if (!autor) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'O autor não existe'\r\n+            })\r\n+\r\n+        }\r\n+        const post = new Post({\r\n+            titulo,\r\n+            descricao,\r\n+            autor\r\n+        })\r\n+        posts.push(post)\r\n+\r\n+        return res.status(201).json(post)\r\n+    }\r\n+    editar(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+        const { titulo, descricao } = req.body\r\n+\r\n+        if (!titulo || !descricao) {\r\n+            return res.status(400).json({\r\n+                mensagem: 'O titulo e a descrição da postagem são obrigatórios'\r\n+            })\r\n+        }\r\n+\r\n+        const post = posts.find((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (!post) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        post.titulo = titulo\r\n+        post.descricao = descricao\r\n+\r\n+        return res.status(204).send()\r\n+\r\n+    }\r\n+    excluir(req: Request, res: Response) {\r\n+        const { id } = req.params\r\n+\r\n+        const postIndice = posts.findIndex((elemento) => {\r\n+            return elemento.id === id\r\n+        })\r\n+\r\n+        if (postIndice === -1) {\r\n+            return res.status(404).json({\r\n+                mensagem: 'A postagem não existe'\r\n+            })\r\n+        }\r\n+\r\n+        posts.splice(postIndice, 1)\r\n+\r\n+        return res.status(204).send()\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1723667229219,
            "name": "Commit-0",
            "content": "import { Request, Response } from \"express\";\r\nimport { autores, posts } from \"../bancodedados\";\r\nimport Autor from \"../modelos/Autor\";\r\n\r\n\r\n\r\n\r\nexport default class PostControlador {\r\n\r\n    listar(req: Request, res: Response) {\r\n\r\n    }\r\n\r\n    detalhar(req: Request, res: Response) {\r\n\r\n    }\r\n\r\n    cadastrar(req: Request, res: Response) {\r\n\r\n    }\r\n\r\n    editar(req: Request, res: Response) {\r\n        // buscar o autor que vai ser editado\r\n        const { id } = req.params\r\n        const { nome, idade } = req.body\r\n\r\n\r\n        if (!nome || !idade) {\r\n\r\n        }\r\n    }\r\n    excluir(req: Request, res: Response) {\r\n\r\n    }"
        }
    ]
}